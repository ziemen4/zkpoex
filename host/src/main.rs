// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
// zkVM: RISC-V ELF & image ID for proving and verification
use methods::{ZKPOEX_GUEST_ELF, ZKPOEX_GUEST_ID};

// zkVM core prover and receipt types
use risc0_zkvm::{default_prover, ExecutorEnv, SuccinctReceipt, InnerReceipt};

// Environment utilities
use dotenv::dotenv;

// Utilities for working with U256 integers
use primitive_types::U256;

// Shared project modules
use shared::{
    evm_utils::get_blockchain_settings, 
    utils::{parse_cli_args_host, generate_function_signature}
};

// Serialization helpers
use serde::Serialize;

// Memory manipulation utility (byte slice conversion)
use bytemuck::cast_slice;

// File system access
use std::fs;
use std::fs::File;
use std::io::Write;

// Async runtime
use tokio;

fn save_all_bytes(filename: &str, data: &[u8]) -> std::io::Result<()> {
    let mut file = File::create(filename)?;
    file.write_all(data)?;
    Ok(())
}


#[derive(Serialize, Debug)]
struct InputData<'a> {
    calldata: &'a str,
    context_state: String,
    program_spec: String,
    blockchain_settings: String,
    value: U256,
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    dotenv().ok();

    // Parse CLI arguments
    let matches = parse_cli_args_host();

    let function_name = matches.get_one::<String>("function").unwrap();
    let params = matches.get_one::<String>("params").unwrap();
    let context_state_file = matches
        .get_one::<std::path::PathBuf>("context-state")
        .unwrap();
    let program_spec_file = matches
        .get_one::<std::path::PathBuf>("program-spec")
        .unwrap();
    let blockchain_settings = get_blockchain_settings().await?;

    // Read the contract bytecode file and generate the calldata dynamically
    let calldata = generate_function_signature(function_name, &[params]);
    println!("Calldata: {}", calldata);

    // Read the context state and program specification files
    let context_state = fs::read_to_string(context_state_file)
        .map_err(|e| format!("Failed to read context state file: {}", e))?;
    println!("Context state: {:?}", context_state);
    
    let program_spec = fs::read_to_string(program_spec_file).expect("Failed to read file");
    println!("Program spec: {:?}", program_spec);

    // TODO: Need to dinamically set the value based on the function 
    // For example, for reentranct we need to send as value a value != 0
    let value = U256::from_dec_str("0").unwrap();
    
    // Construct the input data
    let input = InputData {
        calldata: &calldata,
        context_state,
        program_spec,
        blockchain_settings,
        value,
    };

    println!("Sending input to guest: {:?}", input);
    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover.prove(env, ZKPOEX_GUEST_ELF).unwrap();

    println!("Length in bytes: {}", prove_info.receipt.journal.bytes.len());

    // extract the receipt.
    let receipt = prove_info.receipt;

    let journal_bytes = receipt.journal.bytes.clone();
    println!("Journal bytes: {:?}", &journal_bytes);

    let seal_bytes: &[u8] = match &receipt.inner {
        InnerReceipt::Succinct(SuccinctReceipt { seal, .. }) => cast_slice(seal),
        InnerReceipt::Composite { .. } => {
            eprintln!("Warning: Full receipt does not contain succinct seal!");
            &[0u8; 32]
        }
        _ => {
            eprintln!("Warning: Unknown receipt type!");
            &[0u8; 32]
        }
    };

    println!("Seal bytes: {:?}", &seal_bytes);

    // Save the journal and seal and provide after to VerifierContract.sol
    save_all_bytes("journal.bin", &journal_bytes)?;
    save_all_bytes("seal.bin", &seal_bytes)?;

    let output: u32 = receipt.journal.decode().unwrap();

    println!(
        "Hello, world! I generated a proof of guest execution! {} is a public output from journal",
        output
    );

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    let verification = receipt.verify(ZKPOEX_GUEST_ID);
    println!("Verification: {:?}", verification);

    match receipt.verify(ZKPOEX_GUEST_ID) {
        Ok(_) => println!("Verification successful!"),
        Err(e) => println!("Verification failed: {:?}", e),
    }
    Ok(())
}
