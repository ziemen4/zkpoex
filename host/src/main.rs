// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
// zkVM: RISC-V ELF & image ID for proving and verification
use methods::{ZKPOEX_GUEST_ELF, ZKPOEX_GUEST_ID};

// zkVM core prover and receipt types
use risc0_zkvm::{default_prover, ExecutorEnv, Groth16Receipt, InnerReceipt, SuccinctReceipt};

// Environment utilities
use dotenv::dotenv;

// Utilities for working with U256 integers
use primitive_types::U256;

// Shared project modules
use shared::{
    evm_utils::get_blockchain_settings,
    utils::{generate_function_signature, parse_cli_args_host},
};

// Serialization helpers
use serde::Serialize;

// Memory manipulation utility (byte slice conversion)
use bytemuck::cast_slice;

// File system access
use std::fs;
use std::fs::File;
use std::io::Write;

// Async runtime
use tokio;

use alloy::{
    network::{EthereumWallet, TransactionBuilder},
    primitives::Address,
    providers::{Provider, ProviderBuilder},
    rpc::types::TransactionRequest,
    signers::local::PrivateKeySigner,
    sol,
};
use anyhow::bail;
use anyhow::Context;
use risc0_zkvm::sha::Digestible;
use tracing_subscriber::EnvFilter;
use url::Url;

/// Encode the seal of the given receipt for use with EVM smart contract verifiers.
///
/// Appends the verifier selector, determined from the first 4 bytes of the verifier parameters
/// including the Groth16 verification key and the control IDs that commit to the RISC Zero
/// circuits.
pub fn encode_seal(receipt: &risc0_zkvm::Receipt) -> Result<Vec<u8>, anyhow::Error> {
    let seal = match receipt.inner.clone() {
        InnerReceipt::Fake(receipt) => {
            let seal = receipt.claim.digest().as_bytes().to_vec();
            let selector = &[0xFFu8; 4];
            // Create a new vector with the capacity to hold both selector and seal
            let mut selector_seal = Vec::with_capacity(selector.len() + seal.len());
            selector_seal.extend_from_slice(selector);
            selector_seal.extend_from_slice(&seal);
            selector_seal
        }
        InnerReceipt::Groth16(receipt) => {
            let selector = &receipt.verifier_parameters.as_bytes()[..4];
            // Create a new vector with the capacity to hold both selector and seal
            let mut selector_seal = Vec::with_capacity(selector.len() + receipt.seal.len());
            selector_seal.extend_from_slice(selector);
            selector_seal.extend_from_slice(receipt.seal.as_ref());
            selector_seal
        }
        _ => bail!("Unsupported receipt type"),
        // TODO(victor): Add set verifier seal here.
    };
    Ok(seal)
}

sol! {
    /// The VerifierContract interface
    interface VerifierContract {
        function verify(bytes calldata seal, bytes calldata journal) public payable;
    }
}

fn save_all_bytes(filename: &str, data: &[u8]) -> std::io::Result<()> {
    let mut file = File::create(filename)?;
    file.write_all(data)?;
    Ok(())
}

#[derive(Serialize, Debug)]
struct InputData<'a> {
    calldata: &'a str,
    context_state: String,
    program_spec: String,
    blockchain_settings: String,
    value: U256,
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    dotenv().ok();

    let private_key_str =
        std::env::var("WALLET_PRIV_KEY").expect("PRIVATE_KEY must be set in the .env file");
    let eth_rpc_url_str =
        std::env::var("ETH_RPC_URL").expect("ETHEREUM_RPC_URL must be set in the .env file");

    // Parse CLI arguments
    let matches = parse_cli_args_host();

    let function_name = matches.get_one::<String>("function").unwrap();
    let params = matches.get_one::<String>("params").unwrap();
    let context_state_file = matches
        .get_one::<std::path::PathBuf>("context-state")
        .unwrap();
    let program_spec_file = matches
        .get_one::<std::path::PathBuf>("program-spec")
        .unwrap();
    let value_from_cli = matches.get_one::<String>("value").unwrap();
    let blockchain_settings = get_blockchain_settings().await?;
    let verbose = matches.get_flag("verbose");

    println!("Verbose: {}", verbose);
    let filter = if verbose {
        // debug for everything
        "debug"
    } else {
        // info+ for everything
        "info"
    };

    let env_filter = EnvFilter::new(filter);

    // Initialize the tracing subscriber with the environment filter
    tracing_subscriber::fmt().with_env_filter(env_filter).init();

    // Read the contract bytecode file and generate the calldata dynamically
    let calldata = generate_function_signature(function_name, &[params]);
    shared::log_debug!("Calldata: {}", calldata);

    // Read the context state and program specification files
    let context_state = fs::read_to_string(context_state_file)
        .map_err(|e| format!("Failed to read context state file: {}", e))?;
    shared::log_debug!("Context state: {:?}", context_state);

    let program_spec = fs::read_to_string(program_spec_file).expect("Failed to read file");
    shared::log_debug!("Program spec: {:?}", program_spec);

    let value = if value_from_cli.is_empty() {
        U256::from_dec_str("0").unwrap()
    } else {
        U256::from_dec_str(value_from_cli).unwrap()
    };

    // Construct the input data
    let input = InputData {
        calldata: &calldata,
        context_state,
        program_spec,
        blockchain_settings,
        value,
    };

    shared::log_debug!("Sending input to guest: {:?}", input);
    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    // let prove_info = prover.prove(env, ZKPOEX_GUEST_ELF).unwrap();
    let prove_info = prover
        .prove_with_ctx(
            env,
            &risc0_zkvm::VerifierContext::default(),
            ZKPOEX_GUEST_ELF,
            &risc0_zkvm::ProverOpts::groth16(),
        )
        .unwrap();

    shared::log_debug!(
        "Length in bytes: {}",
        prove_info.receipt.journal.bytes.len()
    );

    // extract the receipt.
    let receipt = prove_info.receipt;

    let journal_bytes = receipt.journal.bytes.clone();
    shared::log_debug!("Journal bytes: {:?}", &journal_bytes);

    let seal_bytes: &[u8] = match &receipt.inner {
        InnerReceipt::Succinct(SuccinctReceipt { seal, .. }) => cast_slice(seal),
        InnerReceipt::Groth16(Groth16Receipt { seal, .. }) => cast_slice(seal),
        InnerReceipt::Composite { .. } => {
            shared::log_warn!("Warning: Full receipt does not contain succinct seal!");
            &[0u8; 32]
        }
        _ => {
            shared::log_warn!("Warning: Unknown receipt type!");
            &[0u8; 32]
        }
    };

    shared::log_debug!("Seal bytes: {:?}", &seal_bytes);

    // Save the journal and seal and provide after to VerifierContract.sol
    save_all_bytes("journal.bin", &journal_bytes)?;
    save_all_bytes("seal.bin", &seal_bytes)?;

    let output: u32 = receipt.journal.decode().unwrap();

    shared::log_info!(
        "Hello, world! I generated a proof of guest execution! {} is a public output from journal",
        output
    );

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    let verification = receipt.verify(ZKPOEX_GUEST_ID);
    shared::log_info!("Verification: {:?}", verification);

    match receipt.verify(ZKPOEX_GUEST_ID) {
        Ok(_) => shared::log_info!("Verification successful!"),
        Err(e) => shared::log_error!("Verification failed: {:?}", e),
    }

    /* ----------------------------------- */
    /* ------ Onchain verification ------- */
    /* ----------------------------------- */
    shared::log_info!("Ethereum RPC URL: {}", eth_rpc_url_str);
    shared::log_info!("Private key: {}", private_key_str);

    // Build PrivateKeySigner with private_key
    let private_key = private_key_str.parse::<PrivateKeySigner>().unwrap();
    let wallet = EthereumWallet::from(private_key);
    let eth_rpc_url: Url = eth_rpc_url_str.parse().unwrap();
    let provider = ProviderBuilder::new().wallet(wallet).on_http(eth_rpc_url);

    // Extract the journal from the receipt.
    let onchain_journal = receipt.journal.bytes.clone();

    // Encode the seal with the selector.
    let onchain_seal = encode_seal(&receipt)?;

    // build calldata
    let calldata = VerifierContract::verifyCall {
        seal: onchain_seal.into(),
        journal: onchain_journal.into(),
    };

    // send tx to callback function: verifyAndFinalizeVotes
    let contract = "0xEF2E59fB6640d5dFDD0e8533B01220896CfBc706"; // Replace with the actual contract address
    let address_contract = contract.parse::<Address>().unwrap();

    let tx = TransactionRequest::default()
        .with_to(address_contract)
        .with_call(&calldata);
    let tx_hash = provider
        .send_transaction(tx)
        .await
        .context("Failed to send transaction")?;
    println!("Transaction sent with hash: {:?}", tx_hash);

    Ok(())
}
